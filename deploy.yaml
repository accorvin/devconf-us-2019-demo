---
- name: Deploy the demo application to OpenShift
  hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Ensure that the required variables are set
      fail:
        msg: "Required variable '{{ item }}' was not found"
      when: "{{ item }} is undefined"
      with_items:
        - kubeconfig
        - namespace

    - name: Create the OpenShift namespace if necessary
      k8s:
        name: "{{ namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        verify_ssl: no

    - name: Deploy the ImageStream and Buildconfig to OpenShift
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: no
        definition: "{{ lookup('template', 'openshift-object-templates/buildconfig-and-imagestream.yaml') }}"

    - name: Deploy the ODH custom resource to OpenShift to enable monitoring
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: no
        definition: "{{ lookup('template', 'openshift-object-templates/odhcr.yaml') }}"
      when: monitoring is defined and monitoring

    - name: Wait for the Grafana deployment to complete
      k8s_facts:
        api_version: v1
        kind: Deployment
        name: grafana
        namespace: "{{ namespace }}"
      register: grafana_dc
      until: "'availableReplicas' in grafana_dc.resources[0].status and grafana_dc.resources[0].status.availableReplicas == 1"
      retries: 15
      delay: 5
      when: monitoring is defined and monitoring

    - name: Get Grafana Route
      k8s_facts:
        api_version: route.openshift.io/v1
        kind: Route
        name: grafana
        namespace: "{{ namespace }}"
      register: grafana_route_output
      when: monitoring is defined and monitoring

    - name: Set Grafana Route
      set_fact:
        grafana_route: https://{{ grafana_route_output.resources[0].spec.host }}
      when: monitoring is defined and monitoring

    - name: Create the Grafana dashboard
      uri:
        method: POST
        url: "{{ grafana_route }}/api/dashboards/db"
        body_format: json
        src: grafana-dashboard.json
        validate_certs: no
      when: monitoring is defined and monitoring

    - name: Deploy the Blackbox Exporter to OpenShift
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: no
        definition: "{{ lookup('template', 'openshift-object-templates/blackbox-exporter.yaml') }}"
      when: monitoring is defined and monitoring

    - name: Deploy Kube-Monkey to OpenShift
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: no
        definition: "{{ lookup('template', 'openshift-object-templates/kube-monkey.yaml') }}"
      when: monkey is defined and monkey

    - name: Deploy a basic deployment config to OpenShift
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: no
        definition: "{{ lookup('template', 'openshift-object-templates/basic-deployment.yaml') }}"
      when: basic_deployment is defined and basic_deployment

    - name: Deploy the kubemonkey victim deploymnt to OpenShift
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: no
        definition: "{{ lookup('template', 'openshift-object-templates/kubemonkey-victim.yaml') }}"
      when: victim is defined and victim

    - name: Deploy a pod autoscaler
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: no
        definition: "{{ lookup('template', 'openshift-object-templates/pod-autoscaler.yaml') }}"
      when: scale is defined and scale
